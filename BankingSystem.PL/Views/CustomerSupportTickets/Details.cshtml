@using BankingSystem.PL.ViewModels.Customer
@model CustomerSupportTicketsViewModel
@{
    ViewData["Title"] = "Details";
}
<link rel="stylesheet" href="/css/CustomerSupportTickets.css" />

<div class="container">
    <div class="page-header mt-3">
        <h3><i class="bi-chat-square-text"></i> Support Tickets</h3>
        <p>View and manage your support requests</p>
    </div>
    <div class="col-md-12">
        <div class="col-auto d-flex align-items-center justify-content-end mb-3">
            <form asp-action="Details" asp-route-id="@Model.Id" method="post" class="ms-auto">
                <label class="form-label me-2 fw-bold">Filter by Status:</label>
                <select asp-for="SelectedStatus" asp-items="ViewBag.statusList"
                        class="btn btn-primary dropdown-toggle" onchange="this.form.submit()">
                </select>
            </form>
        </div>
    </div>
    @if (Model == null || !Model.Tickets.Any())
    {
        <!-- No Tickets Available Box -->
        <div class="card text-center my-5 py-5">
            <div class="card-body">
                <h3 class="card-title mb-3">No Support Tickets Available</h3>
                <p class="card-text text-muted mb-4">You don't have any support tickets at the moment.</p>
                <a asp-action="ApplyTicket" asp-controller="CustomerSupportTickets" asp-route-id="@Model.Id" class="btn btn-primary">Create New Ticket</a>
            </div>
        </div>
    }
    else
    {

        @foreach (var ticket in Model.Tickets)
        {
            <div class="row">
                <div class="col-12">
                    <div class="card ticket-card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <span class="badge bg-warning text-dark status-badge me-2">@ticket.Status</span>
                                <span class="badge bg-info text-dark status-badge">@ticket.Type </span>
                            </div>
                            <span class="ticket-date">@ticket.Date.ToShortDateString()</span>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@ticket.Title</h5>
                            <p class="card-text">@ticket.Description</p>

                            <div class="ticket-response">
                                @if (ticket.Response != null)
                                {
                                    <p class="mb-0"><strong>Support Response:</strong> @ticket.Response</p>
                                }
                                else
                                {
                                    <p class="mb-0"><strong>Please Wait , No Response Yet .</strong></p>

                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

    }

</div>
@section Scripts {
    <script>
                // Wait for the DOM to be fully loaded before executing
        document.addEventListener('DOMContentLoaded', function() {
            // Get the status filter dropdown element
            const statusFilter = document.getElementById('SelectedStatus');

            // Check if the element exists to prevent errors
            if (statusFilter) {
                // Add an event listener for the change event
                statusFilter.addEventListener('change', function() {
                    // Show loading indicator or feedback if needed
                    // This could be a spinner, message, etc.
                    // Example: document.getElementById('loadingSpinner').classList.remove('d-none');

                    // Submit the form
                    this.form.submit();
                });
            }

            // Optional: Add animation for ticket cards
            const ticketCards = document.querySelectorAll('.ticket-card');
            ticketCards.forEach((card, index) => {
                // Add a slight delay for each card to create a cascade effect
                setTimeout(() => {
                    card.classList.add('show');
                }, 100 * index);
            });

            // Optional: Add click event to expand/collapse ticket details
            ticketCards.forEach(card => {
                card.addEventListener('click', function() {
                    // Toggle a class to expand/collapse more details
                    this.classList.toggle('expanded');
                });
            });
        });

    </script>

@* <script src="~/js/CustomerSupportTickets.js"></script> *@
}