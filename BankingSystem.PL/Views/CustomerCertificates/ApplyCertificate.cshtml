@using BankingSystem.DAL.Models
@using BankingSystem.PL.ViewModels.Customer
@model CustomerCertificateVM
@{
    ViewData["Title"] = "Apply for Certificate";
}

<link rel="stylesheet" href="/css/CustomerHome.css" />
<div class="profile-container">
    <!-- Header Section -->
    <div class="welcome-section">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h2 class="mb-2 display-5 fw-bold text-white">Grow Your Savings</h2>
                <p class="mb-2 fs-5">Secure your future with our high-yield certificates.</p>
                <p class="mb-0 text-white">Select a certificate option below to start earning more on your savings.</p>
            </div>
            <div class="col-md-4 text-center d-none d-md-block">
                <i class="bi bi-cash-coin text-white" style="font-size: 5rem;"></i>
                @* bi-award *@
            </div>
        </div>
    </div>
    
    <!-- Certificates Section -->
    <h4 class="mb-3 text-center text-white">Available Certificates</h4>
    <div class="row g-4">
        @foreach (var certificate in Model.Certificates)
        {
            <div class="col-md-4">
                <div class="card h-100 certificate-card"
                     onclick="selectCertificate(@certificate.Id, '@certificate.Name', @certificate.Amount)"
                     data-certificate-id="@certificate.Id">
                    <div class="card-body">
                        <div class="text-center mb-3">
                            @if (certificate.Name.ToLower().Contains("gold"))
                            {
                                <i class="bi bi-award" style="font-size: 3.5rem; color: #FFD700; display: block; margin-bottom: 10px;"></i>
                            }
                            else if (certificate.Name.ToLower().Contains("silver"))
                            {
                                <i class="bi bi-award" style="font-size: 3.5rem; color: #C0C0C0; display: block; margin-bottom: 10px;"></i>
                            }
                            else if (certificate.Name.ToLower().Contains("bronze"))
                            {
                                <i class="bi bi-award" style="font-size: 3.5rem; color: #CD7F32; display: block; margin-bottom: 10px;"></i>
                            }
                            else
                            {
                                <i class="bi bi-certificate" style="font-size: 3.5rem; color: #0d6efd; display: block; margin-bottom: 10px;"></i>
                            }
                            <h5 class="card-title text-primary">@certificate.Name Certificate</h5>
                        </div>
                        <div class="certificate-details mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Duration:</span>
                                <span class="fw-bold">@certificate.Duration months</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Interest Rate:</span>
                                <span class="fw-bold text-success">@certificate.InterestRate%</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Minimum Amount:</span>
                                <span class="fw-bold">$@certificate.Amount.ToString("N2")</span>
                            </div>
                        </div>
                        <hr />
                        <div class="mb-3">
                            <label class="form-label">Enter Amount:</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control certificate-amount"
                                       data-certificate-id="@certificate.Id"
                                       data-min-amount="@certificate.Amount"
                                       min="@certificate.Amount"
                                       placeholder="Enter amount"
                                       onclick="event.stopPropagation();" />
                            </div>
                            <div class="form-text">Minimum $@certificate.Amount.ToString("N0")</div>
                            <div class="invalid-feedback">Amount must be at least $@certificate.Amount.ToString("N0")</div>
                        </div>
                        <div class="selected-indicator text-center" style="display: none;">
                            <i class="bi bi-check-circle-fill text-success" style="font-size: 1.5rem;"></i>
                            <span class="ms-2 text-success fw-bold">Selected</span>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Account Selection -->
    <div class="card shadow-sm my-3">
        <div class="card-body p-3">
            <h4 class="mb-3 text-center">Select Account</h4>
            <form id="certificateForm" asp-action="ApplyCertificate" asp-controller="CustomerCertificates" method="post">
                <input type="hidden" asp-for="CustomerId" />

                <div class="mb-3">  
                    <select asp-for="SelectedAccountId" class="form-select" asp-items="Model.Accounts">
                        <option value="">Select an Account</option>
                    </select>
                    <span asp-validation-for="SelectedAccountId" class="text-danger"></span>
                </div>

                <!-- Hidden fields for selected certificate -->
                <input type="hidden" id="selectedCertificateId" name="SelectedCertificateId" />
                <input type="hidden" id="selectedAmount" name="Amount" />
            </form>
        </div>
    </div>


    <!-- Apply Button (Single button for all certificates) -->
    <div class="text-center my-3">
        <button type="button" id="applyCertificateBtn" class="btn btn-primary btn-lg px-5" disabled>
            Apply for Selected Certificate
        </button>
    </div>



    <!-- Certificate Benefits -->
    <div class="row g-4 mt-4">
        <div class="col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-body text-center" style="background: #f8f9fa;">
                    <i class="bi bi-shield-lock card-icon mb-3"></i>
                    <h5 class="card-title">Guaranteed Returns</h5>
                    <p class="card-text">Our certificates offer fixed rates that won't change during your term, ensuring predictable returns.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-body text-center" style="background: #f8f9fa;">
                    <i class="bi bi-calendar-check card-icon mb-3"></i>
                    <h5 class="card-title">Flexible Terms</h5>
                    <p class="card-text">Choose from various term lengths to match your financial goals and timeline.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-body text-center" style="background: #f8f9fa;">
                    <i class="bi bi-bank card-icon mb-3"></i>
                    <h5 class="card-title">FDIC Insured</h5>
                    <p class="card-text">Your certificate deposits are insured up to the maximum allowed by law.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <div class="mt-4 pt-3 border-top text-center text-muted">
        <small>&copy; 2025 SecureBank. All rights reserved.</small>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirm Certificate Application</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>You are about to apply for the following certificate:</p>
                <div class="mb-3">
                    <strong>Certificate:</strong> <span id="confirmCertificateName"></span>
                </div>
                <div class="mb-3">
                    <strong>Amount:</strong> $<span id="confirmAmount"></span>
                </div>
                <div class="mb-3">
                    <strong>From Account:</strong> <span id="confirmAccount"></span>
                </div>
                <p>Are you sure you want to proceed?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmApplicationBtn">Confirm Application</button>
            </div>
        </div>
    </div>
</div>

<script>
    
          let selectedCertificateId = null;
          let selectedCertificateName = '';
          let selectedCertificateMinAmount = 0;

          function selectCertificate(id, name, minAmount) {
              // Clear previous selection
              document.querySelectorAll('.certificate-card').forEach(card => {
                  card.classList.remove('selected-card');
                  card.querySelector('.selected-indicator').style.display = 'none';
              });

              // Set new selection
              selectedCertificateId = id;
              selectedCertificateName = name;
              selectedCertificateMinAmount = minAmount;

              // Update UI
              const selectedCard = document.querySelector(`.certificate-card[data-certificate-id="${id}"]`);
              selectedCard.classList.add('selected-card');
              selectedCard.querySelector('.selected-indicator').style.display = 'block';

              // Enable apply button
              document.getElementById('applyCertificateBtn').disabled = false;

              // Set hidden field value
              document.getElementById('selectedCertificateId').value = id;
          }

          document.addEventListener('DOMContentLoaded', function() {
              // Prevent input clicks from selecting the card
              document.querySelectorAll('.certificate-amount').forEach(input => {
                  input.addEventListener('click', function(e) {
                      e.stopPropagation();
                  });

                  input.addEventListener('input', function() {
                      const minAmount = parseFloat(this.dataset.minAmount);
                      const enteredAmount = parseFloat(this.value);

                      if (enteredAmount < minAmount) {
                          this.classList.add('is-invalid');
                          this.classList.remove('is-valid');
                      } else {
                          this.classList.remove('is-invalid');
                          this.classList.add('is-valid');
                      }
                  });
              });

              // Handle apply button click
              document.getElementById('applyCertificateBtn').addEventListener('click', function() {
                  if (!selectedCertificateId) {
                      alert('Please select a certificate first.');
                      return;
                  }

                  const accountSelect = document.getElementById('SelectedAccountId');
                  const accountId = accountSelect.value;

                  if (!accountId) {
                      alert('Please select an account first.');
                      accountSelect.focus();
                      return;
                  }

                  const amountInput = document.querySelector(`.certificate-amount[data-certificate-id="${selectedCertificateId}"]`);
                  const amount = parseFloat(amountInput.value);

                  if (!amount || amount < selectedCertificateMinAmount) {
                      alert(`Please enter a valid amount (minimum $${selectedCertificateMinAmount.toLocaleString()}).`);
                      amountInput.focus();
                      return;
                  }

                  // Set form values
                  document.getElementById('selectedAmount').value = amount;

                  // Show confirmation modal
                  const selectedAccountText = accountSelect.options[accountSelect.selectedIndex].text;
                  document.getElementById('confirmCertificateName').textContent = selectedCertificateName;
                  document.getElementById('confirmAmount').textContent = amount.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                  document.getElementById('confirmAccount').textContent = selectedAccountText;

                  const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));
                  modal.show();
              });
          });
    document.addEventListener('DOMContentLoaded', function() {
        // Validate amount inputs
        const amountInputs = document.querySelectorAll('.certificate-amount');
        amountInputs.forEach(input => {
            // Update the input validation logic
input.addEventListener('input', function() {
    const minAmount = parseFloat(this.dataset.minAmount);
    const enteredValue = this.value.trim();

    if (enteredValue === '') {
        // If input is empty, remove both valid and invalid classes
        this.classList.remove('is-invalid');
        this.classList.remove('is-valid');
    } else {
        const enteredAmount = parseFloat(enteredValue);

        if (isNaN(enteredAmount) || enteredAmount < minAmount) {
            // Invalid amount
            this.classList.add('is-invalid');
            this.classList.remove('is-valid');
        } else {
            // Valid amount
            this.classList.remove('is-invalid');
            this.classList.add('is-valid');
        }
    }
});
        });

        // Handle apply button clicks
        const applyButtons = document.querySelectorAll('.apply-certificate-btn');
        applyButtons.forEach(button => {
            button.addEventListener('click', function() {
                const certificateId = this.dataset.certificateId;
                const amountInput = document.querySelector(`.certificate-amount[data-certificate-id="${certificateId}"]`);
                const amount = parseFloat(amountInput.value);
                const minAmount = parseFloat(amountInput.dataset.minAmount);
                const accountSelect = document.getElementById('SelectedAccountId');
                const accountId = accountSelect.value;

                // Validate inputs
                if (!accountId) {
                    alert('Please select an account first.');
                    accountSelect.focus();
                    return;
                }

                if (!amount || amount < minAmount) {
                    alert(`Please enter a valid amount (minimum $${minAmount.toLocaleString()}).`);
                    amountInput.focus();
                    return;
                }

                // Find certificate details for confirmation
                const certificateCard = this.closest('.certificate-card');
                const certificateName = certificateCard.querySelector('.card-title').textContent;
                const selectedAccountText = accountSelect.options[accountSelect.selectedIndex].text;

                // Set confirmation modal values
                document.getElementById('confirmCertificateName').textContent = certificateName;
                document.getElementById('confirmAmount').textContent = amount.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                document.getElementById('confirmAccount').textContent = selectedAccountText;

                // Set hidden form values
                document.getElementById('selectedCertificateId').value = certificateId;
                document.getElementById('selectedAmount').value = amount;

                // Show confirmation modal
                const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));
                modal.show();
            });
        });

        // Handle confirmation button click
        document.getElementById('confirmApplicationBtn').addEventListener('click', function() {
            // Submit the form
            document.getElementById('certificateForm').submit();
        });
    });
</script>

<style>
    .certificate-card {
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
        position: relative;
        border: 2px solid transparent;
    }

    .certificate-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .selected-card {
        border-color: var(--bs-success);
        box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
    }

    .selected-indicator {
        margin-top: 10px;
    }
    .certificate-badge {
        display: inline-block;
        padding: 15px;
        border-radius: 50%;
        background-color: #f8f9fa;
    }

    .card-icon {
        font-size: 2.5rem;
        color: var(--bs-primary);
    }
</style>
